buildscript {
    repositories {
        jcenter()
    }
}

plugins {
    // project plugins
    id 'java-gradle-plugin'
    id 'groovy'
    // test coverage
    id 'jacoco'

    // ide plugin
    id 'idea'

    // publish plugin
    id 'maven-publish'

    // plugin for publishing to Gradle Portal
    id "com.gradle.plugin-publish" version "0.9.4"

}

group 'com.intershop.gradle.test'
description 'Gradle test plugin - test extension for Gradle plugin builds'
version = '1.0.0'

sourceCompatibility = 1.7
targetCompatibility = 1.7

// set correct project status
if (project.version.endsWith('-SNAPSHOT')) {
    status = 'snapshot'
}

jacocoTestReport {
    reports {
        xml.enabled = true // coveralls plugin depends on xml format report
        html.enabled = true
    }
}

task groovydocJar(type: Jar) {
    dependsOn groovydoc
    classifier = 'javadoc'
    from groovydoc.destinationDir
}

// additional sources artifact
task sourceJar(type: Jar) {
    from sourceSets.main.allSource
}

publishing {
    publications {
        intershopMvn(MavenPublication) {
            from components.java

            artifact sourceJar {
                classifier 'sources'
            }

            artifact groovydocJar {
                classifier "javadoc"
            }

            pom.withXml {
                def Node root = asNode();
                root.appendNode('name', project.name)
                root.appendNode('description', project.description)
                root.appendNode('url', "https:/gitlab.intershop.de/IntershopGradlePlugins/${project.name}")

                def scm = root.appendNode( 'scm' )
                scm.appendNode( 'url', "https://gitlab.intershop.de/IntershopGradlePlugins/${project.name}")
                scm.appendNode( 'connection', "scm:git:https://gitlab.intershop.de/IntershopGradlePlugins/${project.name}.git")

                def org = root.appendNode( 'organization' )
                org.appendNode( 'name', 'Intershop Communications' )
                org.appendNode( 'url', 'http://intershop.com' )

                def license = root.appendNode( 'licenses' ).appendNode( 'license' );
                license.appendNode( 'name', 'Apache License, Version 2.0' )
                license.appendNode( 'url', 'http://www.apache.org/licenses/LICENSE-2.0' )
                license.appendNode( 'distribution', 'repo' )
            }
        }
    }
}

test {
    // Gradle versions for test
    systemProperty 'intershop.gradle.versions', '2.10,2.11'
}

// This is a workaround and can be removed, when Gradle supports this.
// Write the plugin's classpath to a file to share with the tests
task createClasspathManifest {
    def outputDir = file("$buildDir/$name")

    inputs.files sourceSets.main.runtimeClasspath
    outputs.dir outputDir

    doLast {
        outputDir.mkdirs()

        // this is necessary because we want test all with the jar
        Set<File> classpathFiles = sourceSets.main.runtimeClasspath.getFiles()
        classpathFiles.remove(sourceSets.main.output.classesDir)
        classpathFiles.remove(sourceSets.main.output.resourcesDir)

        Task task = tasks.findByName(sourceSets.main.jarTaskName)
        task.getOutputs().files.each {File f ->
            classpathFiles.add(f)
        }
        file("$outputDir/plugin-classpath.txt").text = classpathFiles.join("\n")
    }
}

// this is necessary because we want test all with the jar
test.dependsOn jar

pluginBundle {
    website = "https://github.com/IntershopCommunicationsAG/${project.name}"
    vcsUrl = "https://github.com/IntershopCommunicationsAG/${project.name}"
    description = project.description
    tags = ['intershop', 'gradle', 'plugin', 'test']

    plugins {
        gradleTestPlugin {
            id = 'com.intershop.gradle.test'
            displayName = 'Gradle Test Plugin'
        }
    }
}

dependencies {
    compile('org.spockframework:spock-core:1.0-groovy-2.4'){
        exclude group: 'org.codehaus.groovy'
    }

    compile gradleTestKit()
    testRuntime files(createClasspathManifest)
}

repositories {
    jcenter()
}